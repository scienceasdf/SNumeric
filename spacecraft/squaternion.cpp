    return *this;240}241242243inline mat33& mat33::operator*=(const double factor)244{245    a[0][0]*=factor;246    a[0][1]*=factor;247    a[0][2]*=factor;248    a[1][0]*=factor;249    a[1][1]*=factor;250    a[1][2]*=factor;251    a[2][0]*=factor;252    a[2][1]*=factor;253    a[2][2]*=factor;254255    return *this;256}257258const mat33 operator*(const mat33& m1, const mat33& m2);259260class mat66{261private:262    double a[6][6];263public:264    mat66() {}265};266267268double dotProduct(const vec3& vec1, const vec3& vec2);269double angle(const vec3& vec1, const vec3& vec2);270mat33 crossProductMat(const vec3& vec);271mat33 crossProductMat2(const vec3& vec);272mat33 crossProductMat3(const vec3& vec);273mat33 rotationMatrix(const vec3& vec, double alpha);274275const quaternion operator*(const quaternion& q1, const quaternion& q2);276mat33 operator*(double factor, mat33 mat);277vec3 operator*(mat33 mat, vec3 vec);278vec3 operator *(double factor, vec3 vec);279vec3 operator +(vec3 veca,vec3 vecb);280vec3 operator -(vec3 veca,vec3 vecb);281double operator *(vec3r v1, vec3 v2);282mat33 operator *(vec3 v1,vec3r v2);283284mat33 operator +(const mat33& m1, const mat33& m2);285mat33 operator -(const mat33& m1, const mat33& m2);286287void print(vec3& vec);288void print(const mat33& mat);289290291#endif // SQUATERNION_H292

#include<cmath>
#include<iostream>

class mat33;

class vec3{

    friend mat33 rotationMatrix(const vec3& vec, double alpha);
    friend mat33 crossProductMat(const vec3& vec);

private:
    double x,y,z;


public:
    vec3() :x(.0), y(.0), z(.0) {}
    vec3(double xpos, double ypos, double zpos)
        :x(xpos), y(ypos), z(zpos) {}

    ~vec3() {}

    double length() const;
    double lengthSquared() const;
    void normalize();
    vec3 normalized() const;

    inline void setX(double xpos);
    void setY(double ypos);
    void setZ(double zpos);

    double getX() const;
    double getY() const;
    double getZ() const;
};

inline double vec3::length() const {return pow(x*x+y*y+z*z,.5);}
inline double vec3::lengthSquared() const {return (x*x+y*y+z*z);}
inline double vec3::getX() const {return x;}
inline double vec3::getY() const {return y;}
inline double vec3::getZ() const {return z;}
inline void vec3::setX(double xpos){x=xpos;}
inline void vec3::setY(double ypos){y=ypos;}
inline void vec3::setZ(double zpos){z=zpos;}

class quaternion{

    //friend const quaternion operator*(const quaternion& q1, const quaternion& q2) const;
    friend const quaternion operator*(const quaternion& q1, const quaternion& q2);
private:
    double x,y,z,s;
public:
    quaternion(double scalar, double xpos, double ypos, double zpos)
        :s(scalar), x(xpos), y(ypos), z(zpos) {}
    quaternion(double scalar, const vec3& vector);
    quaternion(): s(.0),x(.0),y(.0),z(.0) {}
    ~quaternion() {}

    double length() const;
    double lengthSquared() const;

    void normalize();
    quaternion normalized() const;
    quaternion conjugated() const;

    double getScalar() const;
    double getX() const;
    double getY() const;
    double getZ() const;

    void setScalar(double scalar);
    void setX(double xpos);
    void setY(double ypos);
    void setZ(double zpos);

    vec3 toEulerAngles() const;
    mat33 toRotationMatrix() const;


};

inline double quaternion::lengthSquared() const {return (x*x+y*y+z*z+s*s);}
inline double quaternion::length() const {return pow(x*x+y*y+z*z+s*s,.5);}
inline double quaternion::getX() const {return x;}
inline double quaternion::getY() const {return y;}
inline double quaternion::getZ() const {return z;}
inline double quaternion::getScalar() const {return s;}
inline void quaternion::setX(double xpos) {x=xpos;}
inline void quaternion::setY(double ypos) {y=ypos;}
inline void quaternion::setZ(double zpos) {z=zpos;}
inline void quaternion::setScalar(double scalar) {s=scalar;}

class mat33{

    friend mat33 quaternion::toRotationMatrix() const;
    friend mat33 rotationMatrix(const vec3& vec, double alpha);
    friend mat33 crossProductMat(const vec3& vec);
    friend const mat33 operator*(const mat33& m1, const mat33& m2);
private:
    double a[3][3];
    bool orthogonal;
public:
    mat33() {}
    ~mat33() {}

    mat33 inverse();
    mat33 transpose();

};

const mat33 operator*(const mat33& m1, const mat33& m2);

class mat66{
private:
    double a[6][6];
public:
    mat66() {}
};

class rigidBody
{
    mat66 massTensor;
};

mat33 crossProductMat(const vec3& vec);
mat33 rotationMatrix(const vec3& vec, double alpha);

const quaternion operator*(const quaternion& q1, const quaternion& q2);

const quaternion operator*(const quaternion& q1, const quaternion& q2)
{
    double s,i,j,k,s1,s2,x1,x2,y1,y2,z1,z2;
    s1=q1.s; s2=q2.s;
    x1=q1.x; x2=q2.x;
    y1=q1.y; y2=q2.y;
    z1=q1.z; z2=q2.z;
    s=(s1*s2-x1*x2-y1*y2-z1*z2);
    i=(s1*x2+s2*x1+y1*z2-y2*z1);
    j=(s1*y2+s2*y1+z1*x2-x1*z2);
    k=(s1*z2+s2*z1+x1*y2-x2*y1);
    quaternion res(s,i,j,k);
    return res;
}

mat33 quaternion::toRotationMatrix() const
{
    mat33 res;

    res.a[0][0]=x*x-y*y-z*z+s*s;
    res.a[0][1]=2.0*(x*y+z*s);
    res.a[0][2]=2.0*(x*z-y*s);
    res.a[1][0]=2.0*(x*y-z*s);
    res.a[1][1]=-x*x+y*y-z*z+s*s;
    res.a[1][2]=2.0*(y*z+x*s);
    res.a[2][0]=2.0*(x*z+y*s);
    res.a[2][1]=2.0*(y*z-x*s);
    res.a[2][2]=-x*x-y*y+z*z+s*s;
    res.orthogonal=true;

    return res;
}

quaternion quaternion::conjugated() const
{
    quaternion res=quaternion(s,-x,-y,-z);
    return res;
}

void quaternion::normalize()
{
    double l=length();
    s/=l;
    x/=l;
    y/=l;
    z/=l;
}

mat33 mat33::transpose()
{
    mat33 res;
    res.a[0][0]=a[0][0];
    res.a[0][1]=a[1][0];
    res.a[0][2]=a[2][0];
    res.a[1][0]=a[0][1];
    res.a[1][1]=a[1][1];
    res.a[1][2]=a[2][1];
    res.a[2][0]=a[0][2];
    res.a[2][1]=a[1][2];
    res.a[2][2]=a[2][2];

    return res;
}

mat33 rotationMatrix(const vec3& vec, double alpha)
{
    double e1=vec.x,e2=vec.y,e3=vec.z;
    double s=pow(e1*e1+e2*e2+e3*e3,.5);
    e1/=s;
    e2/=s;
    e3/=s;

    double ca=cos(alpha);
    double sa=sin(alpha);

    mat33 res;

    res.a[0][0]=ca+e1*e1*(1.0-ca);
    res.a[0][1]=e1*e2*(1.0-ca)+e3*sa;
    res.a[0][2]=e1*e3*(1.0-ca)-e2*sa;
    res.a[1][0]=e1*e2*(1.0-ca)-e3*sa;
    res.a[1][1]=ca+e2*e2*(1.0-ca);
    res.a[1][2]=e2*e3*(1.0-ca)+e1*sa;
    res.a[2][0]=e1*e3*(1.0-ca)+e2*sa;
    res.a[2][1]=e2*e3*(1.0-ca)-e1*sa;
    res.a[2][2]=ca+e3*e3*(1.0-ca);

    return res;
}

mat33 crossProductMat(const vec3& vec)
{
    mat33 res;
    res.a[0][0]=res.a[1][1]=res.a[2][2]=.0;
    res.a[0][1]=-vec.z;
    res.a[0][2]=vec.y;
    res.a[1][0]=vec.z;
    res.a[1][2]=-vec.x;
    res.a[2][0]=-vec.y;
    res.a[2][2]=vec.x;
    return res;
}

const mat33 operator*(const mat33& m1, const mat33& m2)
{
    mat33 res;
    for(int i=0;i<3;++i){
        for(int j=0;j<3;++j){
            res.a[i][j]=.0;
            for(int k=0;k<3;++k)
                res.a[i][j]+=m1.a[i][k]*m2.a[k][j];
        }
    }

    return res;
}

int main()
{
    quaternion q1(2,4,3,1);
    q1.normalize();
    auto res=q1*q1.conjugated();
    std::cout<<res.getScalar()<<"+"<<res.getX()<<"i+"<<res.getY()<<"j+"<<res.getZ()<<"k\n";
}
